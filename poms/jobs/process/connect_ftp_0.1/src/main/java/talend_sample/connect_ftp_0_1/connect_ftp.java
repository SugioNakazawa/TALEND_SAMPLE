// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package talend_sample.connect_ftp_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: connect_ftp Purpose: <br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 8.0.1.20210915_1333-M12
 * @status
 */
public class connect_ftp implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

		// if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if (NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "connect_ftp";
	private final String projectName = "TALEND_SAMPLE";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	public void setDataSourceReferences(List serviceReferences) throws Exception {

		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();

		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils
				.getServices(serviceReferences, javax.sql.DataSource.class).entrySet()) {
			dataSources.put(entry.getKey(), entry.getValue());
			talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();
	StatCatcherUtils tStatCatcher_1 = new StatCatcherUtils("_IQ5jIGoSEe2U9-zQeYrmxA", "0.1");

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					connect_ftp.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(connect_ftp.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
						tLogCatcher_1.addMessage("Java Exception", currentComponent, 6,
								e.getClass().getName() + ":" + e.getMessage(), 1);
						tLogCatcher_1Process(globalMap);
					}
				} catch (TalendException e) {
					// do nothing

				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFTPConnection_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFTPConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFTPPut_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tFTPPut_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFTPFileList_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFTPFileList_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFTPGet_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFTPFileList_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFTPFileList_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFTPFileList_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFTPClose_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFTPClose_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogCatcher_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tStatCatcher_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFTPConnection_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFTPPut_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFTPFileList_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFTPClose_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tLogCatcher_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tStatCatcher_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFTPConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFTPConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tFTPConnection_1 begin ] start
				 */

				ok_Hash.put("tFTPConnection_1", false);
				start_Hash.put("tFTPConnection_1", System.currentTimeMillis());

				currentComponent = "tFTPConnection_1";

				int tos_count_tFTPConnection_1 = 0;

				int connectionTimeout_tFTPConnection_1 = Integer.valueOf(0);
				org.apache.commons.net.ftp.FTPClient ftp_tFTPConnection_1 = null;

				try {
					if (("true").equals(System.getProperty("http.proxySet"))) {

//check if the host is in the excludes for proxy
						boolean isHostIgnored_tFTPConnection_1 = false;
						String nonProxyHostsString_tFTPConnection_1 = System.getProperty("http.nonProxyHosts");
						String[] nonProxyHosts_tFTPConnection_1 = (nonProxyHostsString_tFTPConnection_1 == null)
								? new String[0]
								: nonProxyHostsString_tFTPConnection_1.split("\\|");
						for (String nonProxyHost : nonProxyHosts_tFTPConnection_1) {
							if ("localhost".matches(nonProxyHost.trim())) {
								isHostIgnored_tFTPConnection_1 = true;
								break;
							}
						}
						if (!isHostIgnored_tFTPConnection_1) {
							String httpProxyHost = System.getProperty("http.proxyHost");
							int httpProxyPort = Integer.getInteger("http.proxyPort");
							String httpProxyUser = System.getProperty("http.proxyUser");
							String httpProxyPass = System.getProperty("http.proxyPassword");
							ftp_tFTPConnection_1 = new org.apache.commons.net.ftp.FTPHTTPClient(httpProxyHost,
									httpProxyPort, httpProxyUser, httpProxyPass);
						} else {
							ftp_tFTPConnection_1 = new org.apache.commons.net.ftp.FTPClient();
						}
					} else if ("local".equals(System.getProperty("http.proxySet"))) {
						String uriString = "localhost" + ":" + 990;
						java.net.Proxy proxyToUse = org.talend.proxy.TalendProxySelector.getInstance()
								.getProxyForUriString(uriString);

						if (!proxyToUse.equals(java.net.Proxy.NO_PROXY)) {
							java.net.InetSocketAddress proxyAddress = (java.net.InetSocketAddress) proxyToUse.address();

							String httpProxyHost = proxyAddress.getAddress().getHostAddress();
							int httpProxyPort = proxyAddress.getPort();
							String httpProxyUser = "";
							String httpProxyPass = ""; // leave it empty if proxy creds weren't specified

							org.talend.proxy.ProxyCreds proxyCreds = org.talend.proxy.TalendProxyAuthenticator
									.getInstance().getCredsForProxyURI(httpProxyHost + ":" + httpProxyPort);
							if (proxyCreds != null) {
								httpProxyUser = proxyCreds.getUser();
								httpProxyPass = proxyCreds.getPass();
							}

							ftp_tFTPConnection_1 = new org.apache.commons.net.ftp.FTPHTTPClient(httpProxyHost,
									httpProxyPort, httpProxyUser, httpProxyPass);

						} else { // no http proxy for ftp host defined
							ftp_tFTPConnection_1 = new org.apache.commons.net.ftp.FTPClient();
						}
					} else {
						ftp_tFTPConnection_1 = new org.apache.commons.net.ftp.FTPClient();
					}

					ftp_tFTPConnection_1.setControlEncoding("ISO-8859-15");

					if (connectionTimeout_tFTPConnection_1 > 0) {
						ftp_tFTPConnection_1.setDefaultTimeout(connectionTimeout_tFTPConnection_1);
					}

					ftp_tFTPConnection_1.setStrictReplyParsing(true);
					ftp_tFTPConnection_1.connect("localhost", 21);

					final String decryptedPassword_tFTPConnection_1 = routines.system.PasswordEncryptUtil
							.decryptPassword(
									"enc:routine.encryption.key.v1:rGGoHHT3jjp57XNnVVV49RCR3uCZhRFfvA+J4SflGPX6BQ==");

					boolean isLoginSuccessful_tFTPConnection_1 = ftp_tFTPConnection_1.login("username",
							decryptedPassword_tFTPConnection_1);

					if (!isLoginSuccessful_tFTPConnection_1) {
						throw new RuntimeException("Login failed");
					}

					ftp_tFTPConnection_1.setFileType(org.apache.commons.net.ftp.FTP.BINARY_FILE_TYPE);
				} catch (Exception e) {
					throw e;
				}

				ftp_tFTPConnection_1.enterLocalPassiveMode();

				globalMap.put("conn_tFTPConnection_1", ftp_tFTPConnection_1);

				/**
				 * [tFTPConnection_1 begin ] stop
				 */

				/**
				 * [tFTPConnection_1 main ] start
				 */

				currentComponent = "tFTPConnection_1";

				tos_count_tFTPConnection_1++;

				/**
				 * [tFTPConnection_1 main ] stop
				 */

				/**
				 * [tFTPConnection_1 process_data_begin ] start
				 */

				currentComponent = "tFTPConnection_1";

				/**
				 * [tFTPConnection_1 process_data_begin ] stop
				 */

				/**
				 * [tFTPConnection_1 process_data_end ] start
				 */

				currentComponent = "tFTPConnection_1";

				/**
				 * [tFTPConnection_1 process_data_end ] stop
				 */

				/**
				 * [tFTPConnection_1 end ] start
				 */

				currentComponent = "tFTPConnection_1";

				ok_Hash.put("tFTPConnection_1", true);
				end_Hash.put("tFTPConnection_1", System.currentTimeMillis());

				/**
				 * [tFTPConnection_1 end ] stop
				 */
			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFTPConnection_1:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
			}

			tFTPPut_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFTPConnection_1 finally ] start
				 */

				currentComponent = "tFTPConnection_1";

				/**
				 * [tFTPConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFTPConnection_1_SUBPROCESS_STATE", 1);
	}

	public void tFTPPut_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFTPPut_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tFTPPut_1 begin ] start
				 */

				ok_Hash.put("tFTPPut_1", false);
				start_Hash.put("tFTPPut_1", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tFTPPut_1");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tFTPPut_1";

				int tos_count_tFTPPut_1 = 0;

				int nb_file_tFTPPut_1 = 0;
				// *** ftp *** //
				org.apache.commons.net.ftp.FTPClient ftp_tFTPPut_1 = null;
				ftp_tFTPPut_1 = (org.apache.commons.net.ftp.FTPClient) globalMap.get("conn_tFTPConnection_1");
				// msg_tFTPPut_1 likes a String[] to save the message from transfer.
				java.util.List<String> msg_tFTPPut_1 = new java.util.ArrayList<>();

				ftp_tFTPPut_1.setFileType(org.apache.commons.net.ftp.FTP.ASCII_FILE_TYPE);

				String rootDir_tFTPPut_1 = ftp_tFTPPut_1.printWorkingDirectory();
				String remotedir_tFTPPut_1 = (".").replaceAll("\\\\", "/");
				boolean cwdSuccess_tFTPPut_1 = ftp_tFTPPut_1.changeWorkingDirectory(remotedir_tFTPPut_1);

				if (!cwdSuccess_tFTPPut_1) {
					throw new RuntimeException("Failed to change remote directory. " + ftp_tFTPPut_1.getReplyString());
				}

				java.util.List<java.util.Map<String, String>> listtFTPPut_1 = new java.util.ArrayList<java.util.Map<String, String>>();

				java.util.Map<String, String> maptFTPPut_10 = new java.util.HashMap<String, String>();
				maptFTPPut_10.put("*.csv", "");
				listtFTPPut_1.add(maptFTPPut_10);
				String localdirtFTPPut_1 = "/Users/nakazawasugio/talend/wks/TALEND_SAMPLE/testdata/connect_ftp/send";
				for (java.util.Map<String, String> maptFTPPut_1 : listtFTPPut_1) {

					/**
					 * [tFTPPut_1 begin ] stop
					 */

					/**
					 * [tFTPPut_1 main ] start
					 */

					currentComponent = "tFTPPut_1";

					try {
						String currentStatus_tFTPPut_1 = "No file transfered.";
						globalMap.put("tFTPPut_1_CURRENT_STATUS", currentStatus_tFTPPut_1);
						java.util.Set<String> keySettFTPPut_1 = maptFTPPut_1.keySet();

						for (String keytFTPPut_1 : keySettFTPPut_1) {
							if (keytFTPPut_1 == null || "".equals(keytFTPPut_1)) {
								System.err.println("file name invalid!");
								continue;
							}
							String tempdirtFTPPut_1 = localdirtFTPPut_1;
							String filemasktFTPPut_1 = keytFTPPut_1;
							String dirtFTPPut_1 = null;
							String masktFTPPut_1 = filemasktFTPPut_1.replaceAll("\\\\", "/");
							int itFTPPut_1 = masktFTPPut_1.lastIndexOf('/');
							if (itFTPPut_1 != -1) {
								dirtFTPPut_1 = masktFTPPut_1.substring(0, itFTPPut_1);
								masktFTPPut_1 = masktFTPPut_1.substring(itFTPPut_1 + 1);
							}
							if (dirtFTPPut_1 != null && !"".equals(dirtFTPPut_1))
								tempdirtFTPPut_1 = tempdirtFTPPut_1 + "/" + dirtFTPPut_1;
							masktFTPPut_1 = masktFTPPut_1.replaceAll("\\.", "\\\\.").replaceAll("\\*", ".*");
							final String finalMasktFTPPut_1 = masktFTPPut_1;
							java.io.File[] listingstFTPPut_1 = null;
							java.io.File filetFTPPut_1 = new java.io.File(tempdirtFTPPut_1);
							if (filetFTPPut_1.isDirectory()) {
								listingstFTPPut_1 = filetFTPPut_1.listFiles(new java.io.FileFilter() {
									public boolean accept(java.io.File pathname) {
										boolean result = false;
										if (pathname != null && pathname.isFile()) {
											result = java.util.regex.Pattern.compile(finalMasktFTPPut_1)
													.matcher(pathname.getName()).find();
										}
										return result;
									}
								});
							}

							java.util.Set<String> remoteExistsFiles_tFTPPut_1 = new java.util.HashSet<>();

							String[] ftpFileNames_tFTPPut_1 = ftp_tFTPPut_1.listNames();
							for (String ftpFileName : ftpFileNames_tFTPPut_1) {
								if ("".equals(maptFTPPut_1.get(keytFTPPut_1))) {
									if (ftpFileName.matches(masktFTPPut_1)) {
										remoteExistsFiles_tFTPPut_1.add(ftpFileName);
									}
								} else {
									if (ftpFileName.matches(maptFTPPut_1.get(keytFTPPut_1))) {
										remoteExistsFiles_tFTPPut_1.add(ftpFileName);
									}
								}
							}

							if (listingstFTPPut_1 != null && listingstFTPPut_1.length > 0) {
								for (int mtFTPPut_1 = 0; mtFTPPut_1 < listingstFTPPut_1.length; mtFTPPut_1++) {
									if (listingstFTPPut_1[mtFTPPut_1].getName().matches(masktFTPPut_1)) {
										java.io.File file_in_localDir_tFTPPut_1 = listingstFTPPut_1[mtFTPPut_1];
										java.io.FileInputStream file_stream_tFTPPut_1 = new java.io.FileInputStream(
												file_in_localDir_tFTPPut_1);

										final String destRename_tFTPPut_1 = maptFTPPut_1.get(keytFTPPut_1);
										final String dest_tFTPPut_1;
										if (destRename_tFTPPut_1 == null || destRename_tFTPPut_1.isEmpty()) {
											dest_tFTPPut_1 = listingstFTPPut_1[mtFTPPut_1].getName();
										} else {
											dest_tFTPPut_1 = destRename_tFTPPut_1;
										}
										globalMap.put("tFTPPut_1_CURRENT_FILE_EXISTS",
												remoteExistsFiles_tFTPPut_1.contains(dest_tFTPPut_1));

										if ((remoteExistsFiles_tFTPPut_1.contains(dest_tFTPPut_1))) {
											ftp_tFTPPut_1.deleteFile(dest_tFTPPut_1);
										}
										ftp_tFTPPut_1.storeFile(dest_tFTPPut_1, file_stream_tFTPPut_1);

										globalMap.put("tFTPPut_1_CURRENT_FILE_EXISTS",
												remoteExistsFiles_tFTPPut_1.contains(dest_tFTPPut_1));
										remoteExistsFiles_tFTPPut_1.add(dest_tFTPPut_1);
										file_stream_tFTPPut_1.close();
										msg_tFTPPut_1.add("file: " + file_in_localDir_tFTPPut_1.getAbsolutePath()
												+ ", size: " + file_in_localDir_tFTPPut_1.length()
												+ " bytes upload successfully");
										nb_file_tFTPPut_1++;
									}
								}
							} else {
								System.err.println("No matches found for mask '" + keytFTPPut_1 + "'!");
							}
						}
					} catch (java.lang.Exception e_tFTPPut_1) {
						globalMap.put("tFTPPut_1_ERROR_MESSAGE", e_tFTPPut_1.getMessage());
						msg_tFTPPut_1.add("file not found?: " + e_tFTPPut_1.getMessage());
						throw (e_tFTPPut_1);
					}

					tos_count_tFTPPut_1++;

					/**
					 * [tFTPPut_1 main ] stop
					 */

					/**
					 * [tFTPPut_1 process_data_begin ] start
					 */

					currentComponent = "tFTPPut_1";

					/**
					 * [tFTPPut_1 process_data_begin ] stop
					 */

					/**
					 * [tFTPPut_1 process_data_end ] start
					 */

					currentComponent = "tFTPPut_1";

					/**
					 * [tFTPPut_1 process_data_end ] stop
					 */

					/**
					 * [tFTPPut_1 end ] start
					 */

					currentComponent = "tFTPPut_1";

					// *** ftp *** //
				}

				msg_tFTPPut_1.add(nb_file_tFTPPut_1 + " files have been uploaded.");

				String[] msgAll_tFTPPut_1 = msg_tFTPPut_1.toArray(new String[0]);
				StringBuffer sb_tFTPPut_1 = new StringBuffer();
				if (msgAll_tFTPPut_1 != null) {
					for (String item_tFTPPut_1 : msgAll_tFTPPut_1) {
						sb_tFTPPut_1.append(item_tFTPPut_1).append("\n");
					}
				}
				globalMap.put("tFTPPut_1_TRANSFER_MESSAGES", sb_tFTPPut_1.toString());

				if (nb_file_tFTPPut_1 == 0 && !listtFTPPut_1.isEmpty()) {
					throw new RuntimeException("Error during component operation!");
				}

				globalMap.put("tFTPPut_1_NB_FILE", nb_file_tFTPPut_1);
				if (nb_file_tFTPPut_1 == 0 && !listtFTPPut_1.isEmpty()) {
					throw new RuntimeException("Error during component operation!");
				}

				ok_Hash.put("tFTPPut_1", true);
				end_Hash.put("tFTPPut_1", System.currentTimeMillis());

				tStatCatcher_1.addMessage("end", "tFTPPut_1", end_Hash.get("tFTPPut_1") - start_Hash.get("tFTPPut_1"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tFTPPut_1 end ] stop
				 */
			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFTPPut_1:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
			}

			tFTPFileList_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFTPPut_1 finally ] start
				 */

				currentComponent = "tFTPPut_1";

				/**
				 * [tFTPPut_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFTPPut_1_SUBPROCESS_STATE", 1);
	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_TALEND_SAMPLE_connect_ftp = new byte[0];
		static byte[] commonByteArray_TALEND_SAMPLE_connect_ftp = new byte[0];

		public Integer newColumn;

		public Integer getNewColumn() {
			return this.newColumn;
		}

		public String newColumn1;

		public String getNewColumn1() {
			return this.newColumn1;
		}

		public java.util.Date newColumn2;

		public java.util.Date getNewColumn2() {
			return this.newColumn2;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALEND_SAMPLE_connect_ftp.length) {
					if (length < 1024 && commonByteArray_TALEND_SAMPLE_connect_ftp.length == 0) {
						commonByteArray_TALEND_SAMPLE_connect_ftp = new byte[1024];
					} else {
						commonByteArray_TALEND_SAMPLE_connect_ftp = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALEND_SAMPLE_connect_ftp, 0, length);
				strReturn = new String(commonByteArray_TALEND_SAMPLE_connect_ftp, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALEND_SAMPLE_connect_ftp) {

				try {

					int length = 0;

					this.newColumn = readInteger(dis);

					this.newColumn1 = readString(dis);

					this.newColumn2 = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.newColumn, dos);

				// String

				writeString(this.newColumn1, dos);

				// java.util.Date

				writeDate(this.newColumn2, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("newColumn=" + String.valueOf(newColumn));
			sb.append(",newColumn1=" + newColumn1);
			sb.append(",newColumn2=" + String.valueOf(newColumn2));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFTPFileList_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFTPFileList_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();

				/**
				 * [tFTPFileList_1 begin ] start
				 */

				int NB_ITERATE_tFTPGet_1 = 0; // for statistics

				ok_Hash.put("tFTPFileList_1", false);
				start_Hash.put("tFTPFileList_1", System.currentTimeMillis());

				currentComponent = "tFTPFileList_1";

				int tos_count_tFTPFileList_1 = 0;

				java.util.List<String> maskList_tFTPFileList_1 = new java.util.ArrayList<String>();

				maskList_tFTPFileList_1.add("*.csv");
				org.apache.commons.net.ftp.FTPClient ftp_tFTPFileList_1 = null;
				ftp_tFTPFileList_1 = (org.apache.commons.net.ftp.FTPClient) globalMap.get("conn_tFTPConnection_1");
				int nb_file_tFTPFileList_1 = 0;
				org.apache.commons.net.ftp.FTPFile[] ftpFiles_tFTPFileList_1 = null;
				String rootDir_tFTPFileList_1 = ftp_tFTPFileList_1.printWorkingDirectory();
				List<org.apache.commons.net.ftp.FTPFile> fileListTemp_tFTPFileList_1 = new java.util.ArrayList<>();

				String remotedir_tFTPFileList_1 = (".").replaceAll("\\\\", "/");
				boolean cwdSuccess_tFTPFileList_1 = ftp_tFTPFileList_1.changeWorkingDirectory(remotedir_tFTPFileList_1);

				if (!cwdSuccess_tFTPFileList_1) {
					throw new RuntimeException(
							"Failed to change remote directory. " + ftp_tFTPFileList_1.getReplyString());
				}

				ftpFiles_tFTPFileList_1 = ftp_tFTPFileList_1.listFiles();

				String[] nameLists_tFTPFileList_1 = ftp_tFTPFileList_1.listNames();
				List<String> nameListsTemp_tFTPFileList_1 = new java.util.ArrayList<>();

				for (String filemask_tFTPFileList_1 : maskList_tFTPFileList_1) {
					java.util.regex.Pattern fileNamePattern_tFTPFileList_1 = java.util.regex.Pattern
							.compile(filemask_tFTPFileList_1.replaceAll("\\.", "\\\\.").replaceAll("\\*", ".*"));

					if (nameLists_tFTPFileList_1 != null) {
						for (String ftpFile_tFTPFileList_1 : nameLists_tFTPFileList_1) {
							if (fileNamePattern_tFTPFileList_1.matcher(ftpFile_tFTPFileList_1).matches()) {
								nameListsTemp_tFTPFileList_1.add(ftpFile_tFTPFileList_1);
							}
						}
					}
				}

				String currentFilePath_tFTPFileList_1 = remotedir_tFTPFileList_1;
				if (!remotedir_tFTPFileList_1.endsWith("/") && !remotedir_tFTPFileList_1.endsWith("\\")) {
					currentFilePath_tFTPFileList_1 += "/";
				}
				for (String ftpFile_tFTPFileList_1 : nameListsTemp_tFTPFileList_1) {
					String currentFileName_tFTPFileList_1 = ftpFile_tFTPFileList_1;

					globalMap.put("tFTPFileList_1_CURRENT_FILE", currentFileName_tFTPFileList_1);

					globalMap.put("tFTPFileList_1_CURRENT_FILEPATH",
							currentFilePath_tFTPFileList_1 + currentFileName_tFTPFileList_1);

					nb_file_tFTPFileList_1++;

					/**
					 * [tFTPFileList_1 begin ] stop
					 */

					/**
					 * [tFTPFileList_1 main ] start
					 */

					currentComponent = "tFTPFileList_1";

					tos_count_tFTPFileList_1++;

					/**
					 * [tFTPFileList_1 main ] stop
					 */

					/**
					 * [tFTPFileList_1 process_data_begin ] start
					 */

					currentComponent = "tFTPFileList_1";

					/**
					 * [tFTPFileList_1 process_data_begin ] stop
					 */
					NB_ITERATE_tFTPGet_1++;

					if (execStat) {
						runStat.updateStatOnConnection("iterate2", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("row1", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("iterate1", 1, "exec" + NB_ITERATE_tFTPGet_1);
						// Thread.sleep(1000);
					}

					/**
					 * [tFTPGet_1 begin ] start
					 */

					int NB_ITERATE_tFileInputDelimited_1 = 0; // for statistics

					ok_Hash.put("tFTPGet_1", false);
					start_Hash.put("tFTPGet_1", System.currentTimeMillis());

					currentComponent = "tFTPGet_1";

					int tos_count_tFTPGet_1 = 0;

					int nb_file_tFTPGet_1 = 0;
					abstract class FTPGetter_tFTPGet_1 {
						protected org.apache.commons.net.ftp.FTPClient ftpClient = null;
						protected int count = 0;

						public void getAllFiles(String remoteDirectory, String localDirectory)
								throws IllegalStateException, IOException, java.io.FileNotFoundException {

							if (!chdir(remoteDirectory)) {
								// change dir fail
								return;
							}
							String path = ftpClient.printWorkingDirectory();
							org.apache.commons.net.ftp.FTPFile[] ftpFiles = null;
							ftpFiles = ftpClient.listFiles();
							String[] nameLists = null;
							try {
								nameLists = ftpClient.listNames();
							} catch (IOException e) {
								e.printStackTrace();
							}
							if (nameLists != null && (ftpFiles == null || ftpFiles.length == 0)) {
								// if the file is folder, catch the FTPException and recur
								for (String ftpFileName : nameLists) {
									try {
										downloadFile(localDirectory + "/" + ftpFileName, ftpFileName);
									} catch (IOException e) {

										java.io.File localFile = new java.io.File(localDirectory + "/" + ftpFileName);

										if (!localFile.exists()) {
											localFile.mkdir();
										}
										getAllFiles(path + "/" + ftpFileName, localDirectory + "/" + ftpFileName);
										chdir(remoteDirectory);
									}
								}
							} else {
								for (org.apache.commons.net.ftp.FTPFile ftpFile : ftpFiles) {

									if (ftpFile.isDirectory()) {

										if ((!(".").equals(ftpFile.getName())) && (!("..").equals(ftpFile.getName()))) {
											java.io.File localFile = new java.io.File(
													localDirectory + "/" + ftpFile.getName());

											if (!localFile.exists()) {
												localFile.mkdir();
											}
											getAllFiles(path + "/" + ftpFile.getName(),
													localDirectory + "/" + ftpFile.getName());
											chdir(path);
										}
									} else if (!ftpFile.isSymbolicLink()) {
										downloadFile(localDirectory + "/" + ftpFile.getName(), ftpFile.getName());
									}
								}
							}
						}

						public void getFiles(String remoteDirectory, String localDirectory, String maskStr)
								throws IllegalStateException, IOException, java.io.FileNotFoundException {

							chdir(remoteDirectory);
							String[] nameLists = ftpClient.listNames(".");
							if (nameLists != null) {
								for (String fileName : nameLists) {
									if (fileName.matches(maskStr)) {
										downloadFile(localDirectory + "/" + fileName, fileName);
									}
								}
							}
						}

						public boolean chdir(String path) throws IllegalStateException, IOException {
							if (!".".equals(path)) {
								return ftpClient.changeWorkingDirectory(path);
							}
							return true;
						}

						public String pwd() throws IllegalStateException, IOException {
							return ftpClient.printWorkingDirectory();
						}

						protected abstract void downloadFile(String localFileName, String remoteFileName)
								throws IllegalStateException, java.io.FileNotFoundException, IOException;
					}
					org.apache.commons.net.ftp.FTPClient ftp_tFTPGet_1 = null;
					ftp_tFTPGet_1 = (org.apache.commons.net.ftp.FTPClient) globalMap.get("conn_tFTPConnection_1");

					ftp_tFTPGet_1.setFileType(org.apache.commons.net.ftp.FTP.ASCII_FILE_TYPE);
					final java.util.List<String> msg_tFTPGet_1 = new java.util.ArrayList<String>();
					FTPGetter_tFTPGet_1 getter_tFTPGet_1 = new FTPGetter_tFTPGet_1() {
						@Override
						protected void downloadFile(String localFileName, String remoteFileName)
								throws IllegalStateException, java.io.FileNotFoundException, IOException {
							java.io.File localFile = new java.io.File(localFileName);
							downloadFileWithOverwrite(localFileName, remoteFileName);
						}

						private boolean downloadFileWithOverwrite(String localFileName, String remoteFileName)
								throws IllegalStateException, java.io.FileNotFoundException, IOException {
							try (java.io.FileOutputStream localFos = new java.io.FileOutputStream(localFileName)) {
								boolean status = ftpClient.retrieveFile(remoteFileName, localFos);
								if (status) {
									msg_tFTPGet_1.add("file [" + remoteFileName + "] downloaded successfully.");
									globalMap.put("tFTPGet_1_CURRENT_STATUS", "File transfer OK.");
									count++;
								}
								return status;
							} catch (IOException e) {
								globalMap.put("tFTPGet_1_ERROR_MESSAGE", e.getMessage());
								msg_tFTPGet_1.add("file [" + remoteFileName + "] downloaded unsuccessfully.");
								globalMap.put("tFTPGet_1_CURRENT_STATUS", "File transfer fail.");
								throw e;
							}
						}
					};
					getter_tFTPGet_1.ftpClient = ftp_tFTPGet_1;
					String remotedir_tFTPGet_1 = ".";
					if (!".".equals(remotedir_tFTPGet_1)) {
						boolean cwdSuccess_tFTPGet_1 = ftp_tFTPGet_1.changeWorkingDirectory(remotedir_tFTPGet_1);

						if (!cwdSuccess_tFTPGet_1) {
							throw new RuntimeException(
									"Failed to change remote directory. " + ftp_tFTPGet_1.getReplyString());
						}
					}
					java.util.List<String> maskList_tFTPGet_1 = new java.util.ArrayList<String>();

					maskList_tFTPGet_1.add(((String) globalMap.get("tFTPFileList_1_CURRENT_FILE")));
					String localdir_tFTPGet_1 = "/Users/nakazawasugio/talend/wks/TALEND_SAMPLE/testdata/connect_ftp/receive";
//create folder if local direcotry (assigned by property) not exists
					java.io.File dirHandle_tFTPGet_1 = new java.io.File(localdir_tFTPGet_1);

					if (!dirHandle_tFTPGet_1.exists()) {
						dirHandle_tFTPGet_1.mkdirs();
					}
					String root_tFTPGet_1 = getter_tFTPGet_1.pwd();
					if ("/".equals(root_tFTPGet_1)) {
						root_tFTPGet_1 = ".";
					}

					for (String maskStr_tFTPGet_1 : maskList_tFTPGet_1) {

						/**
						 * [tFTPGet_1 begin ] stop
						 */

						/**
						 * [tFTPGet_1 main ] start
						 */

						currentComponent = "tFTPGet_1";

						try {
							globalMap.put("tFTPGet_1_CURRENT_STATUS", "No file transfered.");
							String dir_tFTPGet_1 = root_tFTPGet_1;

							String mask_tFTPGet_1 = maskStr_tFTPGet_1.replaceAll("\\\\", "/");

							int i_tFTPGet_1 = mask_tFTPGet_1.lastIndexOf('/');

							if (i_tFTPGet_1 != -1) {
								dir_tFTPGet_1 = mask_tFTPGet_1.substring(0, i_tFTPGet_1);
								mask_tFTPGet_1 = mask_tFTPGet_1.substring(i_tFTPGet_1 + 1);
							}

							mask_tFTPGet_1 = org.apache.oro.text.GlobCompiler.globToPerl5(mask_tFTPGet_1.toCharArray(),
									org.apache.oro.text.GlobCompiler.DEFAULT_MASK);

							if (dir_tFTPGet_1 != null && !"".equals(dir_tFTPGet_1)) {
								if ((".*").equals(mask_tFTPGet_1)) {
									getter_tFTPGet_1.getAllFiles(dir_tFTPGet_1, localdir_tFTPGet_1);
								} else {
									getter_tFTPGet_1.getFiles(dir_tFTPGet_1, localdir_tFTPGet_1, mask_tFTPGet_1);
								}
							}
							getter_tFTPGet_1.chdir(root_tFTPGet_1);
						} catch (java.lang.Exception e) {
							globalMap.put("tFTPGet_1_ERROR_MESSAGE", e.getMessage());

							throw (e);

						}

						tos_count_tFTPGet_1++;

						/**
						 * [tFTPGet_1 main ] stop
						 */

						/**
						 * [tFTPGet_1 process_data_begin ] start
						 */

						currentComponent = "tFTPGet_1";

						/**
						 * [tFTPGet_1 process_data_begin ] stop
						 */
						NB_ITERATE_tFileInputDelimited_1++;

						if (execStat) {
							runStat.updateStatOnConnection("row1", 3, 0);
						}

						if (execStat) {
							runStat.updateStatOnConnection("iterate2", 1, "exec" + NB_ITERATE_tFileInputDelimited_1);
							// Thread.sleep(1000);
						}

						/**
						 * [tLogRow_1 begin ] start
						 */

						ok_Hash.put("tLogRow_1", false);
						start_Hash.put("tLogRow_1", System.currentTimeMillis());

						currentComponent = "tLogRow_1";

						if (execStat) {
							runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
						}

						int tos_count_tLogRow_1 = 0;

						///////////////////////

						class Util_tLogRow_1 {

							String[] des_top = { ".", ".", "-", "+" };

							String[] des_head = { "|=", "=|", "-", "+" };

							String[] des_bottom = { "'", "'", "-", "+" };

							String name = "";

							java.util.List<String[]> list = new java.util.ArrayList<String[]>();

							int[] colLengths = new int[3];

							public void addRow(String[] row) {

								for (int i = 0; i < 3; i++) {
									if (row[i] != null) {
										colLengths[i] = Math.max(colLengths[i], row[i].length());
									}
								}
								list.add(row);
							}

							public void setTableName(String name) {

								this.name = name;
							}

							public StringBuilder format() {

								StringBuilder sb = new StringBuilder();

								sb.append(print(des_top));

								int totals = 0;
								for (int i = 0; i < colLengths.length; i++) {
									totals = totals + colLengths[i];
								}

								// name
								sb.append("|");
								int k = 0;
								for (k = 0; k < (totals + 2 - name.length()) / 2; k++) {
									sb.append(' ');
								}
								sb.append(name);
								for (int i = 0; i < totals + 2 - name.length() - k; i++) {
									sb.append(' ');
								}
								sb.append("|\n");

								// head and rows
								sb.append(print(des_head));
								for (int i = 0; i < list.size(); i++) {

									String[] row = list.get(i);

									java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());

									StringBuilder sbformat = new StringBuilder();
									sbformat.append("|%1$-");
									sbformat.append(colLengths[0]);
									sbformat.append("s");

									sbformat.append("|%2$-");
									sbformat.append(colLengths[1]);
									sbformat.append("s");

									sbformat.append("|%3$-");
									sbformat.append(colLengths[2]);
									sbformat.append("s");

									sbformat.append("|\n");

									formatter.format(sbformat.toString(), (Object[]) row);

									sb.append(formatter.toString());
									if (i == 0)
										sb.append(print(des_head)); // print the head
								}

								// end
								sb.append(print(des_bottom));
								return sb;
							}

							private StringBuilder print(String[] fillChars) {
								StringBuilder sb = new StringBuilder();
								// first column
								sb.append(fillChars[0]);
								for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
									sb.append(fillChars[2]);
								}
								sb.append(fillChars[3]);

								for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
									sb.append(fillChars[2]);
								}
								sb.append(fillChars[3]);

								// last column
								for (int i = 0; i < colLengths[2] - fillChars[1].length() + 1; i++) {
									sb.append(fillChars[2]);
								}
								sb.append(fillChars[1]);
								sb.append("\n");
								return sb;
							}

							public boolean isTableEmpty() {
								if (list.size() > 1)
									return false;
								return true;
							}
						}
						Util_tLogRow_1 util_tLogRow_1 = new Util_tLogRow_1();
						util_tLogRow_1.setTableName("tLogRow_1");
						util_tLogRow_1.addRow(new String[] { "newColumn", "newColumn1", "newColumn2", });
						StringBuilder strBuffer_tLogRow_1 = null;
						int nb_line_tLogRow_1 = 0;
///////////////////////    			

						/**
						 * [tLogRow_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 begin ] start
						 */

						ok_Hash.put("tFileInputDelimited_1", false);
						start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

						currentComponent = "tFileInputDelimited_1";

						int tos_count_tFileInputDelimited_1 = 0;

						final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

						int nb_line_tFileInputDelimited_1 = 0;
						org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
						int limit_tFileInputDelimited_1 = -1;
						try {

							Object filename_tFileInputDelimited_1 = "/Users/nakazawasugio/talend/wks/TALEND_SAMPLE/testdata/connect_ftp/receive/"
									+ ((String) globalMap.get("tFTPFileList_1_CURRENT_FILE"));
							if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

								int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
								if (footer_value_tFileInputDelimited_1 > 0 || random_value_tFileInputDelimited_1 > 0) {
									throw new java.lang.Exception(
											"When the input source is a stream,footer and random shouldn't be bigger than 0.");
								}

							}
							try {
								fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
										"/Users/nakazawasugio/talend/wks/TALEND_SAMPLE/testdata/connect_ftp/receive/"
												+ ((String) globalMap.get("tFTPFileList_1_CURRENT_FILE")),
										"ISO-8859-15", ",", "\n", true, 0, 0, limit_tFileInputDelimited_1, -1, false);
							} catch (java.lang.Exception e) {
								globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE", e.getMessage());

								System.err.println(e.getMessage());

							}

							while (fid_tFileInputDelimited_1 != null && fid_tFileInputDelimited_1.nextRecord()) {
								rowstate_tFileInputDelimited_1.reset();

								row1 = null;

								boolean whetherReject_tFileInputDelimited_1 = false;
								row1 = new row1Struct();
								try {

									int columnIndexWithD_tFileInputDelimited_1 = 0;

									String temp = "";

									columnIndexWithD_tFileInputDelimited_1 = 0;

									temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
									if (temp.length() > 0) {

										try {

											row1.newColumn = ParserUtils.parseTo_Integer(temp);

										} catch (java.lang.Exception ex_tFileInputDelimited_1) {
											globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
													ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(
													String.format(
															"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"newColumn", "row1", temp, ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
										}

									} else {

										row1.newColumn = null;

									}

									columnIndexWithD_tFileInputDelimited_1 = 1;

									row1.newColumn1 = fid_tFileInputDelimited_1
											.get(columnIndexWithD_tFileInputDelimited_1);

									columnIndexWithD_tFileInputDelimited_1 = 2;

									temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
									if (temp.length() > 0) {

										try {

											row1.newColumn2 = ParserUtils.parseTo_Date(temp, "yyyy-M-d");

										} catch (java.lang.Exception ex_tFileInputDelimited_1) {
											globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
													ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(
													String.format(
															"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"newColumn2", "row1", temp, ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
										}

									} else {

										row1.newColumn2 = null;

									}

									if (rowstate_tFileInputDelimited_1.getException() != null) {
										throw rowstate_tFileInputDelimited_1.getException();
									}

								} catch (java.lang.Exception e) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE", e.getMessage());
									whetherReject_tFileInputDelimited_1 = true;

									System.err.println(e.getMessage());
									row1 = null;

								}

								/**
								 * [tFileInputDelimited_1 begin ] stop
								 */

								/**
								 * [tFileInputDelimited_1 main ] start
								 */

								currentComponent = "tFileInputDelimited_1";

								tos_count_tFileInputDelimited_1++;

								/**
								 * [tFileInputDelimited_1 main ] stop
								 */

								/**
								 * [tFileInputDelimited_1 process_data_begin ] start
								 */

								currentComponent = "tFileInputDelimited_1";

								/**
								 * [tFileInputDelimited_1 process_data_begin ] stop
								 */
// Start of branch "row1"
								if (row1 != null) {

									/**
									 * [tLogRow_1 main ] start
									 */

									currentComponent = "tLogRow_1";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1

												, "row1"

										);
									}

///////////////////////		

									String[] row_tLogRow_1 = new String[3];

									if (row1.newColumn != null) { //
										row_tLogRow_1[0] = String.valueOf(row1.newColumn);

									} //

									if (row1.newColumn1 != null) { //
										row_tLogRow_1[1] = String.valueOf(row1.newColumn1);

									} //

									if (row1.newColumn2 != null) { //
										row_tLogRow_1[2] = FormatterUtils.format_Date(row1.newColumn2, "yyyy-M-d");

									} //

									util_tLogRow_1.addRow(row_tLogRow_1);
									nb_line_tLogRow_1++;
//////

//////                    

///////////////////////    			

									tos_count_tLogRow_1++;

									/**
									 * [tLogRow_1 main ] stop
									 */

									/**
									 * [tLogRow_1 process_data_begin ] start
									 */

									currentComponent = "tLogRow_1";

									/**
									 * [tLogRow_1 process_data_begin ] stop
									 */

									/**
									 * [tLogRow_1 process_data_end ] start
									 */

									currentComponent = "tLogRow_1";

									/**
									 * [tLogRow_1 process_data_end ] stop
									 */

								} // End of branch "row1"

								/**
								 * [tFileInputDelimited_1 process_data_end ] start
								 */

								currentComponent = "tFileInputDelimited_1";

								/**
								 * [tFileInputDelimited_1 process_data_end ] stop
								 */

								/**
								 * [tFileInputDelimited_1 end ] start
								 */

								currentComponent = "tFileInputDelimited_1";

							}
						} finally {
							if (!((Object) ("/Users/nakazawasugio/talend/wks/TALEND_SAMPLE/testdata/connect_ftp/receive/"
									+ ((String) globalMap
											.get("tFTPFileList_1_CURRENT_FILE"))) instanceof java.io.InputStream)) {
								if (fid_tFileInputDelimited_1 != null) {
									fid_tFileInputDelimited_1.close();
								}
							}
							if (fid_tFileInputDelimited_1 != null) {
								globalMap.put("tFileInputDelimited_1_NB_LINE",
										fid_tFileInputDelimited_1.getRowNumber());

							}
						}

						ok_Hash.put("tFileInputDelimited_1", true);
						end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

						/**
						 * [tFileInputDelimited_1 end ] stop
						 */

						/**
						 * [tLogRow_1 end ] start
						 */

						currentComponent = "tLogRow_1";

//////

						java.io.PrintStream consoleOut_tLogRow_1 = null;
						if (globalMap.get("tLogRow_CONSOLE") != null) {
							consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
						} else {
							consoleOut_tLogRow_1 = new java.io.PrintStream(
									new java.io.BufferedOutputStream(System.out));
							globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_1);
						}

						consoleOut_tLogRow_1.println(util_tLogRow_1.format().toString());
						consoleOut_tLogRow_1.flush();
//////
						globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);

///////////////////////    			

						if (execStat) {
							runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
						}

						ok_Hash.put("tLogRow_1", true);
						end_Hash.put("tLogRow_1", System.currentTimeMillis());

						/**
						 * [tLogRow_1 end ] stop
						 */

						if (execStat) {
							runStat.updateStatOnConnection("iterate2", 2, "exec" + NB_ITERATE_tFileInputDelimited_1);
						}

						/**
						 * [tFTPGet_1 process_data_end ] start
						 */

						currentComponent = "tFTPGet_1";

						/**
						 * [tFTPGet_1 process_data_end ] stop
						 */

						/**
						 * [tFTPGet_1 end ] start
						 */

						currentComponent = "tFTPGet_1";

					}
					nb_file_tFTPGet_1 = getter_tFTPGet_1.count;

					msg_tFTPGet_1.add(getter_tFTPGet_1.count + " files have been downloaded.");
					String[] msgAll_tFTPGet_1 = msg_tFTPGet_1.toArray(new String[0]);
					StringBuffer sb_tFTPGet_1 = new StringBuffer();

					if (msgAll_tFTPGet_1 != null) {
						for (String item_tFTPGet_1 : msgAll_tFTPGet_1) {
							sb_tFTPGet_1.append(item_tFTPGet_1).append("\n");
						}
					}
					globalMap.put("tFTPGet_1_TRANSFER_MESSAGES", sb_tFTPGet_1.toString());

					globalMap.put("tFTPGet_1_NB_FILE", nb_file_tFTPGet_1);

					ok_Hash.put("tFTPGet_1", true);
					end_Hash.put("tFTPGet_1", System.currentTimeMillis());

					/**
					 * [tFTPGet_1 end ] stop
					 */
					if (execStat) {
						runStat.updateStatOnConnection("iterate1", 2, "exec" + NB_ITERATE_tFTPGet_1);
					}

					/**
					 * [tFTPFileList_1 process_data_end ] start
					 */

					currentComponent = "tFTPFileList_1";

					/**
					 * [tFTPFileList_1 process_data_end ] stop
					 */

					/**
					 * [tFTPFileList_1 end ] start
					 */

					currentComponent = "tFTPFileList_1";

				}
				globalMap.put("tFTPFileList_1_NB_FILE", nb_file_tFTPFileList_1);

				ok_Hash.put("tFTPFileList_1", true);
				end_Hash.put("tFTPFileList_1", System.currentTimeMillis());

				/**
				 * [tFTPFileList_1 end ] stop
				 */
			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFTPFileList_1:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
			}

			tFTPClose_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFTPFileList_1 finally ] start
				 */

				currentComponent = "tFTPFileList_1";

				/**
				 * [tFTPFileList_1 finally ] stop
				 */

				/**
				 * [tFTPGet_1 finally ] start
				 */

				currentComponent = "tFTPGet_1";

				/**
				 * [tFTPGet_1 finally ] stop
				 */

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tLogRow_1 finally ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFTPFileList_1_SUBPROCESS_STATE", 1);
	}

	public void tFTPClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFTPClose_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tFTPClose_1 begin ] start
				 */

				ok_Hash.put("tFTPClose_1", false);
				start_Hash.put("tFTPClose_1", System.currentTimeMillis());

				currentComponent = "tFTPClose_1";

				int tos_count_tFTPClose_1 = 0;

				Object connObj = globalMap.get("conn_tFTPConnection_1");
				if (connObj != null) {
					try {

						org.apache.commons.net.ftp.FTPClient conn = (org.apache.commons.net.ftp.FTPClient) connObj;
						conn.logout();
						conn.disconnect();

					} catch (Exception e) {
						globalMap.put("tFTPClose_1_ERROR_MESSAGE", e.getMessage());
						throw e;
					}
				}

				/**
				 * [tFTPClose_1 begin ] stop
				 */

				/**
				 * [tFTPClose_1 main ] start
				 */

				currentComponent = "tFTPClose_1";

				tos_count_tFTPClose_1++;

				/**
				 * [tFTPClose_1 main ] stop
				 */

				/**
				 * [tFTPClose_1 process_data_begin ] start
				 */

				currentComponent = "tFTPClose_1";

				/**
				 * [tFTPClose_1 process_data_begin ] stop
				 */

				/**
				 * [tFTPClose_1 process_data_end ] start
				 */

				currentComponent = "tFTPClose_1";

				/**
				 * [tFTPClose_1 process_data_end ] stop
				 */

				/**
				 * [tFTPClose_1 end ] start
				 */

				currentComponent = "tFTPClose_1";

				ok_Hash.put("tFTPClose_1", true);
				end_Hash.put("tFTPClose_1", System.currentTimeMillis());

				/**
				 * [tFTPClose_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFTPClose_1 finally ] start
				 */

				currentComponent = "tFTPClose_1";

				Object connObj = globalMap.get("conn_tFTPConnection_1");
				if (connObj != null) {
					org.apache.commons.net.ftp.FTPClient conn = (org.apache.commons.net.ftp.FTPClient) connObj;
					conn.disconnect();

				}

				/**
				 * [tFTPClose_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFTPClose_1_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_TALEND_SAMPLE_connect_ftp = new byte[0];
		static byte[] commonByteArray_TALEND_SAMPLE_connect_ftp = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public Integer priority;

		public Integer getPriority() {
			return this.priority;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Integer code;

		public Integer getCode() {
			return this.code;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALEND_SAMPLE_connect_ftp.length) {
					if (length < 1024 && commonByteArray_TALEND_SAMPLE_connect_ftp.length == 0) {
						commonByteArray_TALEND_SAMPLE_connect_ftp = new byte[1024];
					} else {
						commonByteArray_TALEND_SAMPLE_connect_ftp = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALEND_SAMPLE_connect_ftp, 0, length);
				strReturn = new String(commonByteArray_TALEND_SAMPLE_connect_ftp, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALEND_SAMPLE_connect_ftp) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.root_pid = readString(dis);

					this.father_pid = readString(dis);

					this.project = readString(dis);

					this.job = readString(dis);

					this.context = readString(dis);

					this.priority = readInteger(dis);

					this.type = readString(dis);

					this.origin = readString(dis);

					this.message = readString(dis);

					this.code = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.root_pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.context, dos);

				// Integer

				writeInteger(this.priority, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message, dos);

				// Integer

				writeInteger(this.code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",context=" + context);
			sb.append(",priority=" + String.valueOf(priority));
			sb.append(",type=" + type);
			sb.append(",origin=" + origin);
			sb.append(",message=" + message);
			sb.append(",code=" + String.valueOf(code));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tLogCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();

				/**
				 * [tLogRow_2 begin ] start
				 */

				ok_Hash.put("tLogRow_2", false);
				start_Hash.put("tLogRow_2", System.currentTimeMillis());

				currentComponent = "tLogRow_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row2");
				}

				int tos_count_tLogRow_2 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_2 = "|";
				java.io.PrintStream consoleOut_tLogRow_2 = null;

				StringBuilder strBuffer_tLogRow_2 = null;
				int nb_line_tLogRow_2 = 0;
///////////////////////    			

				/**
				 * [tLogRow_2 begin ] stop
				 */

				/**
				 * [tLogCatcher_1 begin ] start
				 */

				ok_Hash.put("tLogCatcher_1", false);
				start_Hash.put("tLogCatcher_1", System.currentTimeMillis());

				currentComponent = "tLogCatcher_1";

				int tos_count_tLogCatcher_1 = 0;

				try {
					for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1.getMessages()) {
						row2.type = lcm.getType();
						row2.origin = (lcm.getOrigin() == null || lcm.getOrigin().length() < 1 ? null
								: lcm.getOrigin());
						row2.priority = lcm.getPriority();
						row2.message = lcm.getMessage();
						row2.code = lcm.getCode();

						row2.moment = java.util.Calendar.getInstance().getTime();

						row2.pid = pid;
						row2.root_pid = rootPid;
						row2.father_pid = fatherPid;

						row2.project = projectName;
						row2.job = jobName;
						row2.context = contextStr;

						/**
						 * [tLogCatcher_1 begin ] stop
						 */

						/**
						 * [tLogCatcher_1 main ] start
						 */

						currentComponent = "tLogCatcher_1";

						tos_count_tLogCatcher_1++;

						/**
						 * [tLogCatcher_1 main ] stop
						 */

						/**
						 * [tLogCatcher_1 process_data_begin ] start
						 */

						currentComponent = "tLogCatcher_1";

						/**
						 * [tLogCatcher_1 process_data_begin ] stop
						 */

						/**
						 * [tLogRow_2 main ] start
						 */

						currentComponent = "tLogRow_2";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row2"

							);
						}

///////////////////////		

						strBuffer_tLogRow_2 = new StringBuilder();

						if (row2.moment != null) { //

							strBuffer_tLogRow_2.append(FormatterUtils.format_Date(row2.moment, "yyyy-MM-dd HH:mm:ss"));

						} //

						strBuffer_tLogRow_2.append("|");

						if (row2.pid != null) { //

							strBuffer_tLogRow_2.append(String.valueOf(row2.pid));

						} //

						strBuffer_tLogRow_2.append("|");

						if (row2.root_pid != null) { //

							strBuffer_tLogRow_2.append(String.valueOf(row2.root_pid));

						} //

						strBuffer_tLogRow_2.append("|");

						if (row2.father_pid != null) { //

							strBuffer_tLogRow_2.append(String.valueOf(row2.father_pid));

						} //

						strBuffer_tLogRow_2.append("|");

						if (row2.project != null) { //

							strBuffer_tLogRow_2.append(String.valueOf(row2.project));

						} //

						strBuffer_tLogRow_2.append("|");

						if (row2.job != null) { //

							strBuffer_tLogRow_2.append(String.valueOf(row2.job));

						} //

						strBuffer_tLogRow_2.append("|");

						if (row2.context != null) { //

							strBuffer_tLogRow_2.append(String.valueOf(row2.context));

						} //

						strBuffer_tLogRow_2.append("|");

						if (row2.priority != null) { //

							strBuffer_tLogRow_2.append(String.valueOf(row2.priority));

						} //

						strBuffer_tLogRow_2.append("|");

						if (row2.type != null) { //

							strBuffer_tLogRow_2.append(String.valueOf(row2.type));

						} //

						strBuffer_tLogRow_2.append("|");

						if (row2.origin != null) { //

							strBuffer_tLogRow_2.append(String.valueOf(row2.origin));

						} //

						strBuffer_tLogRow_2.append("|");

						if (row2.message != null) { //

							strBuffer_tLogRow_2.append(String.valueOf(row2.message));

						} //

						strBuffer_tLogRow_2.append("|");

						if (row2.code != null) { //

							strBuffer_tLogRow_2.append(String.valueOf(row2.code));

						} //

						if (globalMap.get("tLogRow_CONSOLE") != null) {
							consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
						} else {
							consoleOut_tLogRow_2 = new java.io.PrintStream(
									new java.io.BufferedOutputStream(System.out));
							globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_2);
						}
						consoleOut_tLogRow_2.println(strBuffer_tLogRow_2.toString());
						consoleOut_tLogRow_2.flush();
						nb_line_tLogRow_2++;
//////

//////                    

///////////////////////    			

						tos_count_tLogRow_2++;

						/**
						 * [tLogRow_2 main ] stop
						 */

						/**
						 * [tLogRow_2 process_data_begin ] start
						 */

						currentComponent = "tLogRow_2";

						/**
						 * [tLogRow_2 process_data_begin ] stop
						 */

						/**
						 * [tLogRow_2 process_data_end ] start
						 */

						currentComponent = "tLogRow_2";

						/**
						 * [tLogRow_2 process_data_end ] stop
						 */

						/**
						 * [tLogCatcher_1 process_data_end ] start
						 */

						currentComponent = "tLogCatcher_1";

						/**
						 * [tLogCatcher_1 process_data_end ] stop
						 */

						/**
						 * [tLogCatcher_1 end ] start
						 */

						currentComponent = "tLogCatcher_1";

					}
				} catch (Exception e_tLogCatcher_1) {
					globalMap.put("tLogCatcher_1_ERROR_MESSAGE", e_tLogCatcher_1.getMessage());
					logIgnoredError(String.format(
							"tLogCatcher_1 - tLogCatcher failed to process log message(s) due to internal error: %s",
							e_tLogCatcher_1), e_tLogCatcher_1);
				}

				ok_Hash.put("tLogCatcher_1", true);
				end_Hash.put("tLogCatcher_1", System.currentTimeMillis());

				/**
				 * [tLogCatcher_1 end ] stop
				 */

				/**
				 * [tLogRow_2 end ] start
				 */

				currentComponent = "tLogRow_2";

//////
//////
				globalMap.put("tLogRow_2_NB_LINE", nb_line_tLogRow_2);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row2");
				}

				ok_Hash.put("tLogRow_2", true);
				end_Hash.put("tLogRow_2", System.currentTimeMillis());

				/**
				 * [tLogRow_2 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tLogCatcher_1 finally ] start
				 */

				currentComponent = "tLogCatcher_1";

				/**
				 * [tLogCatcher_1 finally ] stop
				 */

				/**
				 * [tLogRow_2 finally ] start
				 */

				currentComponent = "tLogRow_2";

				/**
				 * [tLogRow_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}

	public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_TALEND_SAMPLE_connect_ftp = new byte[0];
		static byte[] commonByteArray_TALEND_SAMPLE_connect_ftp = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public Long system_pid;

		public Long getSystem_pid() {
			return this.system_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String job_repository_id;

		public String getJob_repository_id() {
			return this.job_repository_id;
		}

		public String job_version;

		public String getJob_version() {
			return this.job_version;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message_type;

		public String getMessage_type() {
			return this.message_type;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Long duration;

		public Long getDuration() {
			return this.duration;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALEND_SAMPLE_connect_ftp.length) {
					if (length < 1024 && commonByteArray_TALEND_SAMPLE_connect_ftp.length == 0) {
						commonByteArray_TALEND_SAMPLE_connect_ftp = new byte[1024];
					} else {
						commonByteArray_TALEND_SAMPLE_connect_ftp = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALEND_SAMPLE_connect_ftp, 0, length);
				strReturn = new String(commonByteArray_TALEND_SAMPLE_connect_ftp, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALEND_SAMPLE_connect_ftp) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.father_pid = readString(dis);

					this.root_pid = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.system_pid = null;
					} else {
						this.system_pid = dis.readLong();
					}

					this.project = readString(dis);

					this.job = readString(dis);

					this.job_repository_id = readString(dis);

					this.job_version = readString(dis);

					this.context = readString(dis);

					this.origin = readString(dis);

					this.message_type = readString(dis);

					this.message = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.duration = null;
					} else {
						this.duration = dis.readLong();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.root_pid, dos);

				// Long

				if (this.system_pid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.system_pid);
				}

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.job_repository_id, dos);

				// String

				writeString(this.job_version, dos);

				// String

				writeString(this.context, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message_type, dos);

				// String

				writeString(this.message, dos);

				// Long

				if (this.duration == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.duration);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",system_pid=" + String.valueOf(system_pid));
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",job_repository_id=" + job_repository_id);
			sb.append(",job_version=" + job_version);
			sb.append(",context=" + context);
			sb.append(",origin=" + origin);
			sb.append(",message_type=" + message_type);
			sb.append(",message=" + message);
			sb.append(",duration=" + String.valueOf(duration));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tStatCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tStatCatcher_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();

				/**
				 * [tLogRow_3 begin ] start
				 */

				ok_Hash.put("tLogRow_3", false);
				start_Hash.put("tLogRow_3", System.currentTimeMillis());

				currentComponent = "tLogRow_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row3");
				}

				int tos_count_tLogRow_3 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_3 = "|";
				java.io.PrintStream consoleOut_tLogRow_3 = null;

				StringBuilder strBuffer_tLogRow_3 = null;
				int nb_line_tLogRow_3 = 0;
///////////////////////    			

				/**
				 * [tLogRow_3 begin ] stop
				 */

				/**
				 * [tStatCatcher_1 begin ] start
				 */

				ok_Hash.put("tStatCatcher_1", false);
				start_Hash.put("tStatCatcher_1", System.currentTimeMillis());

				currentComponent = "tStatCatcher_1";

				int tos_count_tStatCatcher_1 = 0;

				for (StatCatcherUtils.StatCatcherMessage scm : tStatCatcher_1.getMessages()) {
					row3.pid = pid;
					row3.root_pid = rootPid;
					row3.father_pid = fatherPid;
					row3.project = projectName;
					row3.job = jobName;
					row3.context = contextStr;
					row3.origin = (scm.getOrigin() == null || scm.getOrigin().length() < 1 ? null : scm.getOrigin());
					row3.message = scm.getMessage();
					row3.duration = scm.getDuration();
					row3.moment = scm.getMoment();
					row3.message_type = scm.getMessageType();
					row3.job_version = scm.getJobVersion();
					row3.job_repository_id = scm.getJobId();
					row3.system_pid = scm.getSystemPid();

					/**
					 * [tStatCatcher_1 begin ] stop
					 */

					/**
					 * [tStatCatcher_1 main ] start
					 */

					currentComponent = "tStatCatcher_1";

					tos_count_tStatCatcher_1++;

					/**
					 * [tStatCatcher_1 main ] stop
					 */

					/**
					 * [tStatCatcher_1 process_data_begin ] start
					 */

					currentComponent = "tStatCatcher_1";

					/**
					 * [tStatCatcher_1 process_data_begin ] stop
					 */

					/**
					 * [tLogRow_3 main ] start
					 */

					currentComponent = "tLogRow_3";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row3"

						);
					}

///////////////////////		

					strBuffer_tLogRow_3 = new StringBuilder();

					if (row3.moment != null) { //

						strBuffer_tLogRow_3.append(FormatterUtils.format_Date(row3.moment, "yyyy-MM-dd HH:mm:ss"));

					} //

					strBuffer_tLogRow_3.append("|");

					if (row3.pid != null) { //

						strBuffer_tLogRow_3.append(String.valueOf(row3.pid));

					} //

					strBuffer_tLogRow_3.append("|");

					if (row3.father_pid != null) { //

						strBuffer_tLogRow_3.append(String.valueOf(row3.father_pid));

					} //

					strBuffer_tLogRow_3.append("|");

					if (row3.root_pid != null) { //

						strBuffer_tLogRow_3.append(String.valueOf(row3.root_pid));

					} //

					strBuffer_tLogRow_3.append("|");

					if (row3.system_pid != null) { //

						strBuffer_tLogRow_3.append(String.valueOf(row3.system_pid));

					} //

					strBuffer_tLogRow_3.append("|");

					if (row3.project != null) { //

						strBuffer_tLogRow_3.append(String.valueOf(row3.project));

					} //

					strBuffer_tLogRow_3.append("|");

					if (row3.job != null) { //

						strBuffer_tLogRow_3.append(String.valueOf(row3.job));

					} //

					strBuffer_tLogRow_3.append("|");

					if (row3.job_repository_id != null) { //

						strBuffer_tLogRow_3.append(String.valueOf(row3.job_repository_id));

					} //

					strBuffer_tLogRow_3.append("|");

					if (row3.job_version != null) { //

						strBuffer_tLogRow_3.append(String.valueOf(row3.job_version));

					} //

					strBuffer_tLogRow_3.append("|");

					if (row3.context != null) { //

						strBuffer_tLogRow_3.append(String.valueOf(row3.context));

					} //

					strBuffer_tLogRow_3.append("|");

					if (row3.origin != null) { //

						strBuffer_tLogRow_3.append(String.valueOf(row3.origin));

					} //

					strBuffer_tLogRow_3.append("|");

					if (row3.message_type != null) { //

						strBuffer_tLogRow_3.append(String.valueOf(row3.message_type));

					} //

					strBuffer_tLogRow_3.append("|");

					if (row3.message != null) { //

						strBuffer_tLogRow_3.append(String.valueOf(row3.message));

					} //

					strBuffer_tLogRow_3.append("|");

					if (row3.duration != null) { //

						strBuffer_tLogRow_3.append(String.valueOf(row3.duration));

					} //

					if (globalMap.get("tLogRow_CONSOLE") != null) {
						consoleOut_tLogRow_3 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
					} else {
						consoleOut_tLogRow_3 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
						globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_3);
					}
					consoleOut_tLogRow_3.println(strBuffer_tLogRow_3.toString());
					consoleOut_tLogRow_3.flush();
					nb_line_tLogRow_3++;
//////

//////                    

///////////////////////    			

					tos_count_tLogRow_3++;

					/**
					 * [tLogRow_3 main ] stop
					 */

					/**
					 * [tLogRow_3 process_data_begin ] start
					 */

					currentComponent = "tLogRow_3";

					/**
					 * [tLogRow_3 process_data_begin ] stop
					 */

					/**
					 * [tLogRow_3 process_data_end ] start
					 */

					currentComponent = "tLogRow_3";

					/**
					 * [tLogRow_3 process_data_end ] stop
					 */

					/**
					 * [tStatCatcher_1 process_data_end ] start
					 */

					currentComponent = "tStatCatcher_1";

					/**
					 * [tStatCatcher_1 process_data_end ] stop
					 */

					/**
					 * [tStatCatcher_1 end ] start
					 */

					currentComponent = "tStatCatcher_1";

				}

				ok_Hash.put("tStatCatcher_1", true);
				end_Hash.put("tStatCatcher_1", System.currentTimeMillis());

				/**
				 * [tStatCatcher_1 end ] stop
				 */

				/**
				 * [tLogRow_3 end ] start
				 */

				currentComponent = "tLogRow_3";

//////
//////
				globalMap.put("tLogRow_3_NB_LINE", nb_line_tLogRow_3);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row3");
				}

				ok_Hash.put("tLogRow_3", true);
				end_Hash.put("tLogRow_3", System.currentTimeMillis());

				/**
				 * [tLogRow_3 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tStatCatcher_1 finally ] start
				 */

				currentComponent = "tStatCatcher_1";

				/**
				 * [tStatCatcher_1 finally ] stop
				 */

				/**
				 * [tLogRow_3 finally ] start
				 */

				currentComponent = "tLogRow_3";

				/**
				 * [tLogRow_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tStatCatcher_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	protected PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final connect_ftp connect_ftpClass = new connect_ftp();

		int exitCode = connect_ftpClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}
		boolean inOSGi = routines.system.BundleUtils.inOSGi();

		if (inOSGi) {
			java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

			if (jobProperties != null && jobProperties.get("context") != null) {
				contextStr = (String) jobProperties.get("context");
			}
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = connect_ftp.class.getClassLoader()
					.getResourceAsStream("talend_sample/connect_ftp_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = connect_ftp.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				try {
					// defaultProps is in order to keep the original context value
					if (context != null && context.isEmpty()) {
						defaultProps.load(inContext);
						context = new ContextProperties(defaultProps);
					}
				} finally {
					inContext.close();
				}
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();
		tStatCatcher_1.addMessage("begin");

		this.globalResumeTicket = true;// to run tPreJob

		try {
			tStatCatcher_1Process(globalMap);
		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFTPConnection_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFTPConnection_1) {
			globalMap.put("tFTPConnection_1_SUBPROCESS_STATE", -1);

			e_tFTPConnection_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : connect_ftp");
		}
		tStatCatcher_1.addMessage(status == "" ? "end" : status, (end - startTime));
		try {
			tStatCatcher_1Process(globalMap);
		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;

		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
		closeFtpConnections();

	}

	private void closeFtpConnections() {
		try {
			Object obj_conn;
			obj_conn = globalMap.remove("conn_tFTPConnection_1");
			if (obj_conn != null) {
				((org.apache.commons.net.ftp.FTPClient) obj_conn).logout();
				((org.apache.commons.net.ftp.FTPClient) obj_conn).disconnect();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		connections.put("conn_tFTPConnection_1", globalMap.get("conn_tFTPConnection_1"));

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 115702 characters generated by Talend Open Studio for Data Integration on the
 * 2023年3月10日 14:24:44 JST
 ************************************************************************************************/